---
description:
globs:
alwaysApply: true
---
# コーディングガイドライン

## 基本原則
- **Kotlinスタイルガイド**に準拠すること。
- 共有コード（`shared`や`composeApp`の`commonMain`）では、プラットフォーム依存のAPI呼び出しは避け、共通APIを利用する。
- プラットフォーム固有の処理は`androidMain`や`iosMain`に分離する。
- UIは**宣言的UI（Jetpack Compose/Swift UI）**を利用する。
- SOLID原則を守る。
- 小さく単一責任のクラスを心がけてクラスの肥大化を避ける。
- UIロジックとビジネスロジックは明確に分離する。
- 依存関係の注入やDIフレームワークの利用を推奨。
- android,ios,google,apple,jetbrainなどの公式ライブラリを優先的に利用し、実現が難しい場合は3rd partyの利用を検討する。
- クリーンアーキテクチャを採用。
- ViewModelではMVIパターンで状態管理。
- テスト駆動開発をする。
- すべての公開（public）なクラス、メソッド、プロパティにKDocを記載する。

## 命名規則
- クラス名はPascalCase。
- 変数・関数・メソッド名はcamelCase。
- ファイル・ディレクトリ名はunderscores_case。
- 定数や環境変数はUPPERCASE。
- ブール値はisX, hasX, canXなど動詞で始める。
- 略語は使わず、意味のある単語を使う（API, URLなど標準的なものは除く）。
- マジックナンバーは避け、定数として定義すること。

## 関数・メソッド
- 関数名は必ず動詞＋目的語で命名する。
- 単一責任原則を守り、短くシンプルに保つ。
- 早期リターンを活用し、ネストを避ける。
- 高階関数を活用する。
- デフォルト引数を活用し、nullチェックを減らす。

## KDocコメント
- クラスレベルのKDocには以下の情報を含める：
  - クラスの目的と役割
  - プロパティの説明（@property）
  - コンストラクタの説明（必要な場合、@constructor）
  - 関連クラスへの参照（@see）
- メソッドレベルのKDocには以下の情報を含める：
  - メソッドの機能説明
  - パラメータの説明（@param）
  - 戻り値の説明（@return）
  - 例外の説明（@throws）
  - 使用例（@sample）
- プロパティレベルのKDocには、プロパティの説明を記載する。
- 内部実装の詳細は`@implNote`タグを使用する。
- 関連するクラスやメソッドへの参照は`@see`タグを使用する。
- コメントは日本語で記載し、簡潔かつ明確に記述する。

---

OS固有となるUIのコーディングルールは、別途[os-ui-guidelines.mdc](mdc:os-ui-guidelines.mdc)にまとめます。

詳細なKotlinスタイルガイドは[公式ドキュメント](mdc:https:/kotlinlang.org/docs/coding-conventions.html)も参照してください。
